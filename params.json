{"name":"Convolutionalneuralnetwork","tagline":"An API for a convolutional neural network implemented in C++","body":"#ConvolutionalNeuralNetwork\r\n==========================\r\n\r\nAn API for a convolutional neural network implemented in C++ with the intent to increase and assist research on architectures of neural nets.\r\n\r\n##Static Library\r\n==========================\r\n\r\nThe build and .h files for referencing as an external static library can be found in the Release folder.\r\n\r\n\r\n##What a Convolutional Neural Network is\r\n==========================\r\n\r\nA convolutional neural network is made up of many layers of neurons, or nodes, that hold a value. \r\nThere are also many synapses connecting each neuron, like a link between the nodes. This model is based\r\noff of how our brains work. In a neural network, a synapse is fired and then determines the value of the \r\nneuron it is connected to. Each synapse also has a weight and a bias that go into calculating the value of\r\nthe next neuron. This is similar to how our brains' synapses grow stronger with use, which is how we remember\r\nevents or information. \r\n\r\nEach layer in a convolutional neural network is made up of feature maps, or many neurons that share similar synapses. \r\nIn these feature maps, the output for each neuron is dependent on the neurons in the previous layer, and their weights.\r\nThis helps segment the data into so called feature points. Many feature maps make up a layer, which all make up networks.\r\n\r\nWhen the network learns, or adjusts the weights based off of labeled data, it uses a process of both discriminating and generating data.\r\nIn each layer, the network first discriminates, then generates, then discriminates again, forming what is known as a Markov Chain. Then, alternating \r\nGibbs sampling is used to then find the difference between the first discriminated layer and the layer that was discriminated after \"reconstruction.\" \r\nThese values are then multiplied by a small value, or the learning rate of the network. This is done for each layer going up through the network, creating\r\na recursion learning based off of the adjusted weights in the previous layer. This entire process is often called \"pretraining\" as it is less accurate than\r\ntraditional methods (such as backpropagation) but helps learn the correct neighborhood to then fine-tune the network in.\r\n\r\nThe next process in learning, backpropagation, is found using the error of the entire network. The derivative of this function is found with respect to the \r\nweights, so that each weight can find the role it had in the error of the network. These derivatives are then used to find the minimum of the error function. \r\nAn issue with this algorithm is that the network can become stuck in a local minimum instead of finding the global minimum of the network.\r\n\r\n##How this API is implemented\r\n=================================\r\n\r\nThis API has a neural network premade, with code to discriminate, generate, and teach. Note that a new input must be set for each iteration of\r\ndiscriminating, generating, or teaching. There is also a custom file format created especially for CNNs, consisting only of the data for each layer's \r\nweights.\r\n\r\n#Usage\r\n===============================\r\n\r\nBelow is an example of a basic network that would learn the relationship `y=3x`\r\n```c++\r\nNeuralNet net = NeuralNet();\r\nnet.add_layer(new MaxpoolLayer<1, 1, 1, 1, 1>());\r\nnet.add_layer(new FeedForwardLayer<1, 1, 1>())\r\nnet.add_layer(new OutputLayer<1, 1, 1>());\r\n\r\nnet.learning_rate = 0.05f;\r\nnet.use_dropout = false;\r\nnet.binary_net = false;\r\n\r\nnet.load_data(\"C://example.cnn\");\r\n\r\nstd::vector<Matrix<float>*> input = { new Matrix2D<float, 1, 1>({ 1 }) };\r\nstd::vector<Matrix<float>*> labels = { new Matrix2D<float, 1, 1>({ 3 }) };\r\n\r\nnet.set_input(input);\r\nnet.set_labels(labels);\r\n\r\nfor (int i = 0; i < 100; ++i)\r\n\tnet.train(3);\r\n\t\r\nnet.save_data(\"C://example.cnn\");\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}